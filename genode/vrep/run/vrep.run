set use_usb_driver [expr [have_spec omap4] || [have_spec arndale] || [have_spec rpi]]
set use_nic_driver [expr !$use_usb_driver && ![have_spec imx53] && ![have_spec hw_odroid_xu] && ![have_spec linux] && ![have_spec hw_wand_quad]]

if {[expr !$use_usb_driver && !$use_nic_driver]} {
	puts "\n Run script is not supported on this platform. \n"; exit 0 }

#
# Build
#

set build_components {
	core init
	drivers/timer drivers/nic
	vrep
}

lappend_if $use_usb_driver              build_components drivers/usb
lappend_if [have_spec gpio]             build_components drivers/gpio

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="vrep">
		<resource name="RAM" quantum="5M"/>
		<config>
			<network dhcp="yes" />
                        <vrep ip-address="10.0.0.1" port="19997" />
                </config>
	</start>
}

append_if [have_spec gpio] config {
	<start name="gpio_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Gpio"/></provides>
		<config/>
	</start>}

append_if $use_usb_driver config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides>
			<service name="Nic"/>
		</provides>
		<config ehci="yes">
			<nic mac="0A:02:00:00:00:03" />
			<raw>
				<policy label="usb_terminal -> usb_serial" vendor_id="0x67b" product_id="0x2303"/>
			</raw>
		</config>
	</start>}

append_platform_drv_config

append_if $use_nic_driver config {
	<start name="nic_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
	</start>}

append config {
</config>
}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
    core init timer
    libvrepremote.lib.so ld.lib.so libc.lib.so lwip.lib.so libm.lib.so stdcxx.lib.so pthread.lib.so
    vrep
}

# platform-specific modules
lappend_if $use_usb_driver              boot_modules usb_drv
lappend_if $use_nic_driver              boot_modules nic_drv
lappend_if [have_spec gpio]             boot_modules gpio_drv

append_platform_drv_boot_modules

build_boot_image $boot_modules

#
# Execute test case
#

# qemu config
append qemu_args " -m 1024 -nographic -smp 4 "

append qemu_args " -net nic,macaddr=02:00:00:00:01:03 "

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

#append qemu_args " -net vde,sock=/tmp/switch1 "
append qemu_args " -net tap,ifname=tap0,script=no "

run_genode_until forever
